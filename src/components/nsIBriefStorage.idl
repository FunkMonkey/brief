#include "nsISupports.idl"
interface nsIBriefFeed;
interface nsIBriefFeedEntry;
interface nsIWritablePropertyBag2;

/**
 * This interface represents a query to the Brief's database. Its attributes are
 * conditions specifying which entries are selected. The conditions are ANDed.
 */
[scriptable, uuid(be536868-2db5-408e-9622-42be8d0d00d5)]
interface nsIBriefQuery : nsISupports {

    /**
     * Space-separated list of ids of entries to be selected.
     */
    attribute string entries;

    /**
     * Space-separated lists of ids of feeds containing the entries to be selected.
     */
    attribute string feeds;

    /**
     * Space-separated lists of ids of folders containing the entries to be selected.
     */
    attribute string folders;

    /**
     * The following attributes represent entry status flags. If one of these attributes
     * is TRUE then the respective flag must be present on selected entries.
     */
    attribute boolean read;

    attribute boolean unread;

    attribute boolean starred;

    attribute boolean unstarred;

    /**
     * Deleted state of entries to be selected. Must be one of the below constants.
     *
     * @default value is ENTRY_STATE_NORMAL.
     */
    const short ENTRY_STATE_NORMAL = 0;
    const short ENTRY_STATE_TRASHED = 1;
    const short ENTRY_STATE_DELETED = 2;
    const short ENTRY_STATE_ANY = 3;

    attribute short deleted;

    /**
     * String that must be contained by either title, summary or content of the selected
     * entries.
     */
    attribute AString searchString;

    /**
     * Date range for the selected entries.
     */
    attribute long long startDate;

    attribute long long endDate;

    /**
     * Maximum number of entries to be selected.
     *
     * @default value is 0 (unlimited).
     */
    attribute unsigned long limit;

    /**
     * Specifies how many result entries to skip at the beggining of the result set.
     *
     * @default value is 1.
     */
    attribute unsigned long offset;

    /**
     * Include hidden (no longer in Live Bookmarks) feeds.
     *
     * @default value is FALSE
     */
    attribute boolean includeHiddenFeeds;

    /**
     * By which column to sort the results. Must be one of the below constants.

     * @default is NO_SORT.
     */
    const short NO_SORT = 0;
    const short SORT_BY_DATE = 1;
    const short SORT_BY_TITLE = 2;
    const short SORT_BY_FEED_ROW_INDEX = 3;

    attribute short sortOrder;

    /**
     * Direction in which to sort the results. Must be one of the below constants.
     *
     * @default is SORT_DESCENDING.
     */
    const short SORT_DESCENDING = 0;
    const short SORT_ASCENDING = 1;

    attribute short sortDirection;

    /**
     * Convenience function to set the most common constraint conditions all at once.
     */
    void setConditions(in string feeds, in string entries, in boolean unread);

    /**
     * Returns the computed SQL query string.
     */
    AString getQueryText();

    /**
     * Return the cumputed SQL query string including the clauses that may be used only
     * with SELECT statement.
     */
    AString getQueryTextForSelect();

};


/**
 * This interface is intended be implemented as a service. It provides access
 * to the the feed database. Feeds in the database are always taken from user's
 * Live Bookmarks from the folder specified by extensions.brief.liveBookmarksFolder
 * pref.
 */
[scriptable, uuid(982F337E-7EE9-11DB-8A00-7C8255D89593)]
interface nsIBriefStorage : nsISupports {

  /**
   * Gets a feed (or a folder) by its ID.
   *
   * @param feedID
   * @returns nsIBriefFeed object containing the feed (without the entries).
   */
  nsIBriefFeed getFeed(in string feedID);

  /**
   * Gets all feeds, without entries.
   *
   * @param  feedCount  Empty object (required by XPConnect to return an array).
   *
   * @returns array of nsIBriefFeed objects
   */
  void getAllFeeds(out unsigned long feedCount,
                  [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  void getFeedsAndFolders(out unsigned long feedCount,
                          [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  /**
   * Get array of entries matching specified constraints sorted descending by
   * date.
   *
   * @param query      Query selecting the entries.
   * @param entryCount Empty object (required by XPConnect to return an array).
   *
   * @returns Array of nsIBriefFeedEntry objects.
   */
  void getEntries(in nsIBriefQuery query,
                  out unsigned long entryCount,
                  [retval, array, size_is(entryCount)] out nsIBriefFeedEntry entries);

  /**
   * This function gets a space-separated entry id list of entries matching
   * specified rules constraints.
   *
   * @param  query  Query selecting the entries.
   *
   * @returns Property bag containing "entries" and "feeds" string properties.
   */
  nsIWritablePropertyBag2 getSerializedEntries(in nsIBriefQuery query);

  /**
   * Returns number of entries.
   *
   * @param  query  Query selecting the entries to be counted.
   */
  unsigned long getEntriesCount(in nsIBriefQuery query);

  /**
   * Synchronize database with Live Bookmarks in folder which RDF id is
   * specified by extensions.brief.liveBookmarksFolder.
   * Previously added feeds that aren't in the current folder anymore are
   * hidden, so the data is restored if they are added again.
   *
   * @throws if extensions.brief.liveBookmarksFolder preference is empty.
   */
  void syncWithBookmarks();

  /**
   * Update feed with new entries. This can be called asynchronously.
   *
   * @param feed Contains the feed with which to update the database.
   */
  void updateFeed(in nsIBriefFeed feed);

  /**
   * Marks entries as read/unread.
   *
   * @param  status  New status of entries (TRUE for read, FALSE for unread).
   * @param  query   Query selecting the entries to be processed.
   */
  void markEntriesRead(in boolean status, in nsIBriefQuery query);

  /**
   * Mark entries as starred/unstarred.
   *
   * @param  status  New status of entries (TRUE for starred, FALSE for not starred).
   * @param  query   Query selecting the entries to be processed.
   */
  void starEntries(in boolean status, in nsIBriefQuery query);

  /**
   * Sets the entries' deleted state or removes them from the database..
   *
   * @param  state  The new deleted state or instruction to remove the entries from the
   *                database. Must be one of the below constants.
   * @param  query  Query selecting the entries to be processed.
   *
   * @throws on invalid |state| parameter.
   */
  const short ENTRY_STATE_NORMAL = 0;
  const short ENTRY_STATE_TRASHED = 1;
  const short ENTRY_STATE_DELETED = 2;
  const short REMOVE_FROM_DATABASE = 3;

  void deleteEntries(in short state, in nsIBriefQuery query);

};

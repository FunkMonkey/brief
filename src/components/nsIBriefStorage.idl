#include "nsISupports.idl"
interface nsIBriefFeed;
interface nsIBriefEntryList;
interface nsIBriefStorageObserver;
interface nsIVariant;

/**
 * This interface represents a query to the Brief's database. Its attributes are
 * constraints specifying which entries are selected. The constraints are ANDed.
 */
[scriptable, uuid(be536868-2db5-408e-9622-42be8d0d00d5)]
interface nsIBriefQuery : nsISupports {

    /**
     * Array of IDs of entries to be selected.
     */
    attribute nsIVariant entries;

    /**
     * Array of IDs of feeds containing the entries to be selected.
     */
    attribute nsIVariant feeds;

    /**
     * Array of IDs of folders containing the entries to be selected.
     */
    attribute nsIVariant folders;

    /**
     * Array of tags which selected entries must have.
     */
    attribute nsIVariant tags;

    /**
     * Entry status. Set any of these attributes to TRUE to limit query to entries with
     * respetive status.
     */
    attribute boolean read;

    attribute boolean unread;

    attribute boolean starred;

    attribute boolean unstarred;

    /**
     * Deleted state of entries to be selected.
     *
     * @default value is ENTRY_STATE_ANY.
     */
    const short ENTRY_STATE_NORMAL = 0;
    const short ENTRY_STATE_TRASHED = 1;
    const short ENTRY_STATE_DELETED = 2;
    const short ENTRY_STATE_ANY = 3;

    attribute short deleted;

    /**
     * String that must be contained by title, content, authors or tags of the
     * selected entries.
     */
    attribute AString searchString;

    /**
     * Date range for the selected entries.
     */
    attribute long long startDate;

    attribute long long endDate;

    /**
     * Maximum number of entries to be selected.
     *
     * @default value is 0 (unlimited).
     */
    attribute unsigned long limit;

    /**
     * Specifies how many result entries to skip at the beggining of the result set.
     *
     * @default value is 0.
     */
    attribute unsigned long offset;

    /**
     * Include hidden feeds i.e. the ones whose Live Bookmarks are no longer to be found
     * in Brief home folder. This attribute is ignored if the list of feeds is explicitly
     * specified by |feeds| attribute.
     *
     * @default value is FALSE
     */
    attribute boolean includeHiddenFeeds;

    /**
     * By which column to sort the results. Must be one of the below constants.

     * @default is NO_SORT.
     */
    const short NO_SORT = 0;
    const short SORT_BY_DATE = 1;
    const short SORT_BY_TITLE = 2;
    const short SORT_BY_FEED_ROW_INDEX = 3;

    attribute short sortOrder;

    /**
     * Direction in which to sort the results. Must be one of the below constants.
     *
     * @default is SORT_DESCENDING.
     */
    const short SORT_DESCENDING = 0;
    const short SORT_ASCENDING = 1;

    attribute short sortDirection;

    /**
     * Convenience function to be used by Components.Constructor.
     */
    void setEntries(in nsIVariant entries);

    /**
     * Indicates if there are any entries that match this query.
     */
    boolean hasMatches();

    /**
     * Returns the number of selected entries.
     */
    unsigned long long getEntryCount();

    /**
     * Returns a list of IDs of selected entries.
     *
     * @returns Array if IDs of selected entries.
     */
    nsIVariant getEntries();

    /**
     * Returns the selected entries with all their properties.
     *
     * @returns Array of nsIBriefFeedEntry objects.
     */
    nsIVariant getFullEntries();

    /**
     * Returns value of a property for each of the selected entries.
     *
     * @param propertyName Name of the property (see the database schema
     *                     for the list of properties).
     * @param distinct     Don't include multiple entries with the same value.
     * @returns Array of JS objects containing the requested property
     *          and ID of the corresponding entry.
     */
    nsIVariant getProperty(in string propertyName, [optional] in boolean distinct);

    /**
     * Marks selected entries as read/unread.
     *
     * @param state New state of entries (TRUE for read, FALSE for unread).
     */
    void markEntriesRead(in boolean state);

    /**
     * Bookmarks or unbookmarks URLs of the selected entries.
     *
     * @param state New state of entries. TRUE to bookmark, FALSE to unbookmark.
     */
    void starEntries(in boolean state);

    /**
     * The starred status of entries is automatically kept in sync with user's bookmarks
     * by the storage service. However, there's always a possibility that it goes out of
     * sync, for example while Brief is disabled or uninstalled. This method verifies
     * status of the selected entries.
     * If an entry is starred, but no bookmarks are found for its URI, then a new bookmark
     * is added. If an entry isn't starred, but there is a bookmark for its URI, this
     * function stars the entry. Tags are also verified.
     *
     * @returns TRUE if the starred status was in sync, FALSE otherwise.
     */
    boolean verifyEntriesStarredStatus();

    /**
     * Sets the deleted state of the selected entries or removes them from the database.
     *
     * @param state The new deleted state (as defined above, near nsIBriefQuery.deleted
     *              attribute) or instruction to physically remove the entries from the
     *              database (REMOVE_FROM_DATABASE constant below).
     *
     * @throws NS_ERROR_INVALID_ARG on invalid |state| parameter.
     */
    const short REMOVE_FROM_DATABASE = 4;

    void deleteEntries(in short state);

};


/**
 * This interface is implemented as a service and manages the feed database.
 */
[scriptable, uuid(982F337E-7EE9-11DB-8A00-7C8255D89593)]
interface nsIBriefStorage : nsISupports {

  /**
   * Gets a feed (or a folder) by its ID.
   *
   * @param feedID
   * @returns nsIBriefFeed object containing the feed (without the entries).
   */
  nsIBriefFeed getFeed(in string feedID);

  /**
   * Gets all feeds, without entries.
   *
   * @param includeFolders
   * @returns array of nsIBriefFeed objects.
   */
  nsIVariant getAllFeeds([optional] in boolean includeFolders);

  /**
   * Gets a list of distinct tags for URLs of entries stored in the database.
   *
   * @returns Array of tag names.
   */
  nsIVariant getAllTags();

  /**
   * Synchronizes database with Live Bookmarks from home folder which ID is
   * specified by extensions.brief.homeFolder.
   * Feeds that were removed from the home folder remain in the database in the hidden
   * state for a certain amount of time in case they are added back.
   */
  void syncWithLivemarks();

  /**
   * Evaluates provided entries, inserting any new items and updating existing
   * items when newer versions are found. Also updates feed's properties.
   *
   * @param feed Contains the feed and the entries to evaluate.
   */
  void updateFeed(in nsIBriefFeed feed);

  /**
   * Saves feed settings: entryAgeLimit, maxEntries, updateInterval and
   * markModifiedEntriesUnread.
   *
   * @param feed nIBriefFeed object whose properties to use to update the respective
   *             columns in the database.
   */
  void setFeedOptions(in nsIBriefFeed feed);

  /**
   * Physically removes all deleted items and runs SQL VACUUM command to reclaim
   * disc space and defragment the database.
   */
  void compactDatabase();

  /**
   * Registers an object implementing nsIBriefStorageObserver to be notified
   * of entry changes. The storage service keeps a strong reference to this object,
   * so all observers have to be removed using nsIBriefStorage.removeObserver() to
   * prevent leaks.
   */
  void addObserver(in nsIBriefStorageObserver observer);

  /**
   * Unregisters an object implementing nsIBriefStorageObserver.
   */
  void removeObserver(in nsIBriefStorageObserver observer);

};


/**
 * Consumers can implement this interface to be notified about changes made to
 * entries stored in the database.
 */
[scriptable, uuid(8105e6fa-cf93-48b7-8f15-157ffa04f345)]
interface nsIBriefStorageObserver : nsISupports {

  /**
   * Called when new entries are added to the database.
   */
  void onEntriesAdded(in nsIBriefEntryList entryList);

  /**
   * Called when properties of existing entries, such as title, content, authors
   * and date, are changed. When entries are updated, they also may be marked as unread.
   */
  void onEntriesUpdated(in nsIBriefEntryList entryList);

  /**
   * Called when the read/unread state of entries changes.
   */
  void onEntriesMarkedRead(in nsIBriefEntryList entryList, in boolean newState);

  /**
   * Called when URLs of entries are bookmarked/unbookmarked.
   */
  void onEntriesStarred(in nsIBriefEntryList entryList, in boolean newState);

  /**
   * Called when a tag is added or removed from entries.
   */
  void onEntriesTagged(in nsIBriefEntryList entryList, in boolean newState, in AString tagName);

  /**
   * Called when the deleted state of entries changes.
   */
  void onEntriesDeleted(in nsIBriefEntryList entryList, in short newState);

};

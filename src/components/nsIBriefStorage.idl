#include "nsISupports.idl"
interface nsIBriefFeed;
interface nsIBriefFeedEntry;
interface nsIWritablePropertyBag2;

/**
 * This interface is intended be implemented as a service. It provides access
 * to the the feed database. Feeds in the database are always taken from user's
 * Live Bookmarks from the folder specified by extensions.brief.liveBookmarksFolder
 * pref.
 */
[scriptable, uuid(982F337E-7EE9-11DB-8A00-7C8255D89593)]
interface nsIBriefStorage : nsISupports {

  /**
   * Get a feed by its URL, without entries.
   *
   * @param feedURL URL identifying the feed
   * @returns nsIBriefFeed object containing the feed.
   */
  nsIBriefFeed getFeed(in string feedId);

  /**
   * Get all feeds, without entries.
   *
   * @param feedCount Empty object (required by XPConnect to return an array).
   *
   * @returns array of nsIBriefFeed objects
   */
  void getAllFeeds(out unsigned long feedCount,
                  [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  void getFeedsAndFolders(out unsigned long feedCount,
                          [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  /**
   * Get array of entries matching specified constraints sorted descending by
   * date.
   *
   * @param entryId       Space-separated list of ids of entries to select.
   * @param feedId        Space-separated list of URLs identifying the feeds
   *                      whose entries to select.
   * @param rules         Space-separated list of rules which selected
   *                      entries must match. Possible rules:
   *                      'read', 'unread', 'starred', 'unstarred', 'trashed'.
   * @param searchString  String that either title, summary or content of the
   *                      entry must containt.
   * @param offset        Index of the first entry to get (as sorted by date).
   * @param limit         Number of entries to get.
   * @param entryCount    Empty object (required by XPConnect to return an array).
   *
   * @returns Array of nsIBriefFeedEntry objects.
   */
  void getEntries(in string entryId,
                  in string feedId,
                  in string rules,
                  in AUTF8String searchString,
                  in unsigned long offset,
                  in unsigned long limit,
                  out unsigned long entryCount,
                  [retval, array, size_is(entryCount)]
                  out nsIBriefFeedEntry entries);

  /**
   * This function gets a space-separated entry id list of entries matching
   * specified rules constraints.
   *
   * For the parameters see getEntries().
   *
   * @returns Property bag containing "entryIdList" and "feedURLList"
   *          AUTF8String properties.
   */
  nsIWritablePropertyBag2 getSerializedEntries(in string entryId,
                                               in string feedId,
                                               in string rules,
                                               in AString searchString);

  /**
   * Returns number of entries matching specified constraints.
   *
   * For the parameters see getEntries().
   */
  unsigned long getEntriesCount(in string feedId,
                                in string rules,
                                in AString searchString);

  /**
   * Synchronize database with Live Bookmarks in folder which RDF id is
   * specified by extensions.brief.liveBookmarksFolder.
   * Previously added feeds that aren't in the current folder anymore are
   * hidden, so the data is restored if they are added again.
   *
   * @throws if extensions.brief.liveBookmarksFolder is empty.
   */
  void syncWithBookmarks();

  /**
   * Update feed with new entries. This can be called asynchronously.
   *
   * @param feed Contains the feed with which to update the database.
   */
  void updateFeed(in nsIBriefFeed feed);

  /**
   * Mark entries as read/unread.
   *
   * @param newStatus New status of the entry (false for unread, true for read).
   *
   * For the rest of the parameters see getEntries().
   */
  void markEntriesRead(in boolean newStatus,
                       in string entryId,
                       in string feedId,
                       in string rules,
                       in Astring searchString);

  /**
   * Deletes a entries.
   *
   * @param action 0 - restore from trash
   *               1 - move to trash
   *               2 - delete (still only a flag)
   *               3 - remove from database
   * For the rest of the parameters see getEntries().
   *
   * @throws on invalid action parameter.
   */
  void deleteEntries(in octet action,
                     in string entryId,
                     in string feedId,
                     in string rules,
                     in Astring searchString);

  void starEntry(in string entryId, in boolean newStatus);

};

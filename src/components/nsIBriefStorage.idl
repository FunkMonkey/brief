#include "nsISupports.idl"
interface nsIBriefFeed;
interface nsIBriefFeedEntry;
interface nsIWritablePropertyBag2;

/**
 * This interface represents a query to the Brief's database. Its attributes are
 * conditions specifying which entries are selected. The conditions are ANDed.
 */
[scriptable, uuid(be536868-2db5-408e-9622-42be8d0d00d5)]
interface nsIBriefQuery : nsISupports {

    /**
     * Space-separated list of ids of entries to be selected.
     */
    attribute string entries;

    /**
     * Space-separated lists of ids of feeds containing the entries to be selected.
     */
    attribute string feeds;

    /**
     * Space-separated lists of ids of folders containing the entries to be selected.
     */
    attribute string folders;

    /**
     * Entry status. Set any of these attributes to TRUE to limit query to entries with
     * respetive status.
     */
    attribute boolean read;

    attribute boolean unread;

    attribute boolean starred;

    attribute boolean unstarred;

    /**
     * Deleted state of entries to be selected.
     *
     * @default value is ENTRY_STATE_NORMAL.
     */
    const short ENTRY_STATE_NORMAL = 0;
    const short ENTRY_STATE_TRASHED = 1;
    const short ENTRY_STATE_DELETED = 2;
    const short ENTRY_STATE_ANY = 3;

    attribute short deleted;

    /**
     * String that must be contained by either title or content of the selected entries.
     */
    attribute AString searchString;

    /**
     * Date range for the selected entries.
     */
    attribute long long startDate;

    attribute long long endDate;

    /**
     * Maximum number of entries to be selected.
     *
     * @default value is 0 (unlimited).
     */
    attribute unsigned long limit;

    /**
     * Specifies how many result entries to skip at the beggining of the result set.
     *
     * @default value is 1.
     */
    attribute unsigned long offset;

    /**
     * Include hidden feeds i.e. the ones whose Live Bookmarks are no longer to be found
     * in our home bookmarks folder.
     *
     * @default value is FALSE
     */
    attribute boolean includeHiddenFeeds;

    /**
     * By which column to sort the results. Must be one of the below constants.

     * @default is NO_SORT.
     */
    const short NO_SORT = 0;
    const short SORT_BY_DATE = 1;
    const short SORT_BY_TITLE = 2;
    const short SORT_BY_FEED_ROW_INDEX = 3;

    attribute short sortOrder;

    /**
     * Direction in which to sort the results. Must be one of the below constants.
     *
     * @default is SORT_DESCENDING.
     */
    const short SORT_DESCENDING = 0;
    const short SORT_ASCENDING = 1;

    attribute short sortDirection;

    /**
     * Convenience function to set the most common constraint conditions.
     */
    void setConditions(in string feeds, in string entries, in boolean unread);

    /**
     * Returns selected entries in full.
     *
     * @param entryCount Empty object (required by XPConnect to return an array).
     *
     * @returns Array of nsIBriefFeedEntry objects.
     */
    void getEntries(out unsigned long entryCount,
                    [retval, array, size_is(entryCount)] out nsIBriefFeedEntry entries);

    /**
     * Returns a space-separated list of IDs of selected entries and a list of
     * IDs of feeds which these entries belong to.
     *
     * @returns Property bag containing "entries" and "feeds" string properties.
     */
    nsIWritablePropertyBag2 getSerializedEntries();

    /**
     * Returns the number of selected entries.
     */
    unsigned long getEntriesCount();

    /**
     * Marks selected entries as read/unread.
     *
     * @param  status  New status of entries (TRUE for read, FALSE for unread).
     */
    void markEntriesRead(in boolean status);

    /**
     * Mark selected entries as starred/unstarred.
     *
     * @param  status  New status of entries (TRUE for starred, FALSE for not starred).
     */
    void starEntries(in boolean status);

    /**
     * Sets the deleted state of the selected entries or removes them from the database.
     *
     * @param  state  The new deleted state (as defined above, near nsIBriefQuery.deleted
     *                attribute) or instruction to physically remove the entries from the
     *                database (REMOVE_FROM_DATABASE constant below).
     *
     * @throws on invalid |state| parameter.
     */
    const short REMOVE_FROM_DATABASE = 4;

    void deleteEntries(in short state);

};


/**
 * This interface is implemented as a service and manages the feed database.
 */
[scriptable, uuid(982F337E-7EE9-11DB-8A00-7C8255D89593)]
interface nsIBriefStorage : nsISupports {

  /**
   * Gets a feed (or a folder) by its ID.
   *
   * @param feedID
   * @returns nsIBriefFeed object containing the feed (without the entries).
   */
  nsIBriefFeed getFeed(in string feedID);

  /**
   * Gets all feeds, without entries.
   *
   * @param  feedCount  Empty object (required by XPConnect to return an array).
   *
   * @returns array of nsIBriefFeed objects.
   */
  void getAllFeeds(out unsigned long feedCount,
                  [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  /**
   * Similar to |getAllFeeds| but also includes folders.
   */
  void getFeedsAndFolders(out unsigned long feedCount,
                          [retval, array, size_is(feedCount)] out nsIBriefFeed feeds);

  /**
   * Synchronizes database with Live Bookmarks from home folder which RDF URI is
   * specified by extensions.brief.liveBookmarksFolder.
   * Feeds that were removed from the home folder remain in the database in the hidden
   * state for some time.
   */
  void syncWithBookmarks();

  /**
   * Updates the feed properties such as title based on the provided nsIBriefFeed.
   * Evaluates the provided entries, inserting any new items and updating existing
   * items when newer versions are available.
   *
   * @param  feed  Contains the feed and the entries to evaluate for new data.
   */
  void updateFeed(in nsIBriefFeed feed);

  /**
   * Sets various feed's settings (currently entryAgeLimit, maxEntries,
   * and updateInterval).
   *
   * @param  feed  nIBriefFeed object with whose properties to update the respective
   *               fields in the database.
   */
  void setFeedOptions(in nsIBriefFeed feed);

};

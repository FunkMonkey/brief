#include "nsISupports.idl"

interface nsIFeed;
interface nsIFeedEntry;
interface nsIVariant;

/**
 * This interface represents a feed entry. It is the carrier for
 * entry's data and all properties associated with the entry.
 */
[scriptable, uuid(8992831E-7F1D-11DB-B61C-02D955D89593)]
interface nsIBriefFeedEntry : nsISupports {

  /**
   * Unique number identifying an entry in Brief's database.
   */
  attribute unsigned long long id;

  /**
   * These attributes contain entry's data.
   */
  attribute AUTF8String entryURL;

  attribute AString title;

  attribute AString summary;

  attribute AString content;

  attribute unsigned long long date;

  attribute AString authors;

  /**
   * Feed which the entry belongs to.
   */
  attribute string feedID;

  /**
   * Status information about the entry stored in the database.
   */
  attribute boolean read;

  attribute boolean starred;

  attribute boolean updated;

  /**
   * ID if the corresponing bookmark, or -1 if entry isn't bookmarked.
   */
  attribute long long bookmarkID;

  /**
   * Array of tags for the entry's URI (if it is bookmarked).
   */
  attribute nsIVariant tags;

  /**
   * The wrapped entry (if available).
   */
  attribute nsIFeedEntry wrappedEntry;

  /**
   * Wraps an instance of nsIFeedEntry, mapping some of its properties
   * for easier access.
   *
   * @param  feed  nsIFeedEntry object to wrap.
   */
  void wrapEntry(in nsIFeedEntry entry);

};


/**
 * This interface represents a feed. It is the carrier for feed's
 * data and all properties associated with the feed.
 */
[scriptable, uuid(8308ABD6-7F1D-11DB-A716-FFD855D89593)]
interface nsIBriefFeed : nsISupports {

  /**
   * Unique string identifying an entry in Brief's database.
   */
  attribute string feedID;

  /**
   * These attributes contain feed's data.
   */
  attribute AUTF8String feedURL;

  attribute AUTF8String websiteURL;

  attribute AString title;

  attribute AString subtitle;

  attribute AUTF8String imageURL;

  attribute AUTF8String imageLink;

  attribute AString imageTitle;

  attribute AString dateModified;

  /**
   * base64-encoded data: URI of the favicon of the site under websiteURL.
   */
  attribute string favicon;

  /**
   * Date of the oldest entry that was available the last time
   * when the feed was checked for updates.
   */
  attribute unsigned long long oldestEntryDate;

  /**
   * Index of the Live Bookmark relative to the Brief's home folder
   * (not to the Live Bookmark's direct parent).
   */
  attribute unsigned long rowIndex;

  attribute boolean isFolder;

  /**
   * feedID of the parent folder.
   */
  attribute string parent;

  /**
   * ID of the Live Bookmark.
   */
  attribute string bookmarkID;

  /**
   * Feed-specific preferences.
   */
  attribute unsigned long entryAgeLimit;

  attribute unsigned long maxEntries;

  attribute unsigned long long updateInterval;

  attribute boolean markModifiedEntriesUnread;

  /**
   * Last time the feed was checked for updates.
   */
  attribute unsigned long long lastUpdated;

  /**
   * The wrapped feed (if available).
   */
  attribute nsIFeed wrappedFeed;

  /**
   * Get the feed's entries. Since there is no method in this interface to
   * attach entries directly, they can come only from wrapping an nsIFeed (see
   * wrapFeed()).
   *
   * @returns  Array of nsIBriefFeedEntry objects.
   */
  attribute nsIVariant entries;

  /**
   * Wraps an instance of nsIFeed, mapping some of its selected properties for
   * easier access.
   *
   * @param  feed  nsIFeed object to wrap.
   */
  void wrapFeed(in nsIFeed feed);

};


/**
 * A simple list of entries. It stores them as parallel arrays of their properties.
 * If any of these arrays weren't set manually, they are automatically populated by
 * their getters as long as IDs property array is set.
 */
[scriptable, uuid(6efa76a4-a1da-4751-9db7-08aba109fc0a)]
interface nsIBriefEntryList : nsISupports {

    readonly attribute long long length;

    attribute nsIVariant IDs;

    attribute nsIVariant feedIDs;

    attribute nsIVariant read;

    attribute nsIVariant starred;

    attribute nsIVariant deleted;

    attribute nsIVariant tags;

};
